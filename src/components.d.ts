/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  StyleType,
  TabType,
} from './objects/types';
import {
  EventEmitter,
} from '@stencil/core';


export namespace Components {

  interface BrnCheckbox {
    'checked': boolean;
    'type': keyof StyleType;
  }
  interface BrnCheckboxAttributes extends StencilHTMLAttributes {
    'checked'?: boolean;
    'onChanged'?: (event: CustomEvent<boolean>) => void;
    'type'?: keyof StyleType;
  }

  interface BrnCollapse {
    'active': boolean;
  }
  interface BrnCollapseAttributes extends StencilHTMLAttributes {
    'active'?: boolean;
  }

  interface BrnColumn {
    'columns': number;
    'total': number;
  }
  interface BrnColumnAttributes extends StencilHTMLAttributes {
    'columns'?: number;
    'total'?: number;
  }

  interface BrnDropdown {
    'active': boolean;
    'closeable': boolean;
  }
  interface BrnDropdownAttributes extends StencilHTMLAttributes {
    'active'?: boolean;
    'closeable'?: boolean;
  }

  interface BrnRadio {
    'checked': boolean;
    'name': string;
    'type': keyof StyleType;
  }
  interface BrnRadioAttributes extends StencilHTMLAttributes {
    'checked'?: boolean;
    'name'?: string;
    'onChanged'?: (event: CustomEvent<boolean>) => void;
    'type'?: keyof StyleType;
  }

  interface BrnRow {}
  interface BrnRowAttributes extends StencilHTMLAttributes {}

  interface BrnSlider {}
  interface BrnSliderAttributes extends StencilHTMLAttributes {}

  interface BrnTab {
    'active': boolean;
    'name': string;
  }
  interface BrnTabAttributes extends StencilHTMLAttributes {
    'active'?: boolean;
    'name'?: string;
    'onTabChanged'?: (event: CustomEvent<TabType>) => void;
    'onTabLoaded'?: (event: CustomEvent<TabType>) => void;
  }

  interface BrnTabs {}
  interface BrnTabsAttributes extends StencilHTMLAttributes {}

  interface BrnToggle {
    'checked': boolean;
    'type': keyof StyleType;
  }
  interface BrnToggleAttributes extends StencilHTMLAttributes {
    'checked'?: boolean;
    'onChanged'?: (event: CustomEvent<boolean>) => void;
    'type'?: keyof StyleType;
  }
}

declare global {
  interface StencilElementInterfaces {
    'BrnCheckbox': Components.BrnCheckbox;
    'BrnCollapse': Components.BrnCollapse;
    'BrnColumn': Components.BrnColumn;
    'BrnDropdown': Components.BrnDropdown;
    'BrnRadio': Components.BrnRadio;
    'BrnRow': Components.BrnRow;
    'BrnSlider': Components.BrnSlider;
    'BrnTab': Components.BrnTab;
    'BrnTabs': Components.BrnTabs;
    'BrnToggle': Components.BrnToggle;
  }

  interface StencilIntrinsicElements {
    'brn-checkbox': Components.BrnCheckboxAttributes;
    'brn-collapse': Components.BrnCollapseAttributes;
    'brn-column': Components.BrnColumnAttributes;
    'brn-dropdown': Components.BrnDropdownAttributes;
    'brn-radio': Components.BrnRadioAttributes;
    'brn-row': Components.BrnRowAttributes;
    'brn-slider': Components.BrnSliderAttributes;
    'brn-tab': Components.BrnTabAttributes;
    'brn-tabs': Components.BrnTabsAttributes;
    'brn-toggle': Components.BrnToggleAttributes;
  }


  interface HTMLBrnCheckboxElement extends Components.BrnCheckbox, HTMLStencilElement {}
  var HTMLBrnCheckboxElement: {
    prototype: HTMLBrnCheckboxElement;
    new (): HTMLBrnCheckboxElement;
  };

  interface HTMLBrnCollapseElement extends Components.BrnCollapse, HTMLStencilElement {}
  var HTMLBrnCollapseElement: {
    prototype: HTMLBrnCollapseElement;
    new (): HTMLBrnCollapseElement;
  };

  interface HTMLBrnColumnElement extends Components.BrnColumn, HTMLStencilElement {}
  var HTMLBrnColumnElement: {
    prototype: HTMLBrnColumnElement;
    new (): HTMLBrnColumnElement;
  };

  interface HTMLBrnDropdownElement extends Components.BrnDropdown, HTMLStencilElement {}
  var HTMLBrnDropdownElement: {
    prototype: HTMLBrnDropdownElement;
    new (): HTMLBrnDropdownElement;
  };

  interface HTMLBrnRadioElement extends Components.BrnRadio, HTMLStencilElement {}
  var HTMLBrnRadioElement: {
    prototype: HTMLBrnRadioElement;
    new (): HTMLBrnRadioElement;
  };

  interface HTMLBrnRowElement extends Components.BrnRow, HTMLStencilElement {}
  var HTMLBrnRowElement: {
    prototype: HTMLBrnRowElement;
    new (): HTMLBrnRowElement;
  };

  interface HTMLBrnSliderElement extends Components.BrnSlider, HTMLStencilElement {}
  var HTMLBrnSliderElement: {
    prototype: HTMLBrnSliderElement;
    new (): HTMLBrnSliderElement;
  };

  interface HTMLBrnTabElement extends Components.BrnTab, HTMLStencilElement {}
  var HTMLBrnTabElement: {
    prototype: HTMLBrnTabElement;
    new (): HTMLBrnTabElement;
  };

  interface HTMLBrnTabsElement extends Components.BrnTabs, HTMLStencilElement {}
  var HTMLBrnTabsElement: {
    prototype: HTMLBrnTabsElement;
    new (): HTMLBrnTabsElement;
  };

  interface HTMLBrnToggleElement extends Components.BrnToggle, HTMLStencilElement {}
  var HTMLBrnToggleElement: {
    prototype: HTMLBrnToggleElement;
    new (): HTMLBrnToggleElement;
  };

  interface HTMLElementTagNameMap {
    'brn-checkbox': HTMLBrnCheckboxElement
    'brn-collapse': HTMLBrnCollapseElement
    'brn-column': HTMLBrnColumnElement
    'brn-dropdown': HTMLBrnDropdownElement
    'brn-radio': HTMLBrnRadioElement
    'brn-row': HTMLBrnRowElement
    'brn-slider': HTMLBrnSliderElement
    'brn-tab': HTMLBrnTabElement
    'brn-tabs': HTMLBrnTabsElement
    'brn-toggle': HTMLBrnToggleElement
  }

  interface ElementTagNameMap {
    'brn-checkbox': HTMLBrnCheckboxElement;
    'brn-collapse': HTMLBrnCollapseElement;
    'brn-column': HTMLBrnColumnElement;
    'brn-dropdown': HTMLBrnDropdownElement;
    'brn-radio': HTMLBrnRadioElement;
    'brn-row': HTMLBrnRowElement;
    'brn-slider': HTMLBrnSliderElement;
    'brn-tab': HTMLBrnTabElement;
    'brn-tabs': HTMLBrnTabsElement;
    'brn-toggle': HTMLBrnToggleElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
